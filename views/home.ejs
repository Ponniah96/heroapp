<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js" defer></script>
    <script src="/socket.io/socket.io.js" defer></script>
    <script>
        const ROOM_ID = "<%= roomID %>"
    </script>
    <!-- <script src="homepageScript.js" defer type="text/javascript"></script> -->
    <script type="text/javascript">
        document.addEventListener("DOMContentLoaded", function () {
            const socket = io('/');
            const myPeer = new Peer({ host: 'peerjs-server.herokuapp.com', secure: true, port: 443 })
            const peers = {};
            const streamValues = document.getElementById('captureStreams');

            myPeer.on('open', id => {
                socket.emit('join-room', ROOM_ID, id);
            })

            // navigator.mediaDevices.getUserMedia({
            //     video: false,
            //     audio: true
            // }).then(streams => {
            const createEmptyAudioTrack = () => {
                const ctx = new AudioContext();
                const oscillator = ctx.createOscillator();
                const dst = oscillator.connect(ctx.createMediaStreamDestination());
                oscillator.start();
                const track = dst.stream.getAudioTracks()[0];
                return Object.assign(track, { enabled: false });
            };
            const createEmptyVideoTrack = () => {
                const canvas = Object.assign(document.createElement('canvas'));
                canvas.getContext('2d')
                const stream = canvas.captureStream();
                const track = stream.getVideoTracks()[0];
                return Object.assign(track, { enabled: false });
            };
            const audioTrack = createEmptyAudioTrack();
            const videoTrack = createEmptyVideoTrack();
            const mediaStream = new MediaStream([audioTrack, videoTrack]);
            console.log('MediaSteram: ', mediaStream);
            myPeer.on('call', call => {
                call.answer(mediaStream);
                var streamID;
                call.on('stream', userVideoStream => {
                    if (streamID == 'null' || streamID !== userVideoStream.id) {
                        streamID = userVideoStream.id;
                        const video = document.createElement('video');
                        video.srcObject = userVideoStream;
                        // console.log("PEER GET VIDEO TRACKS MUTED STATUS: ", video.srcObject.getVideoTracks()[0])
                        video.addEventListener('loadedmetadata', (e) => {
                            video.play()
                        });
                        streamValues.append(video);
                    }
                })
            })

            socket.on('user-connected', userId => {
                const calls = myPeer.call(userId, mediaStream);
                var socketstreamID;
                calls.on('stream', userVideoStream => {
                    if (socketstreamID == 'null' || socketstreamID !== userVideoStream.id) {
                        socketstreamID = userVideoStream.id;
                        const video = document.createElement('video');
                        video.srcObject = userVideoStream;
                        // console.log("SOCKET GET VIDEO TRACKS MUTED STATUS: ", video.srcObject.getVideoTracks()[0])
                        video.addEventListener('loadedmetadata', (e) => {
                            video.play()
                        });
                        streamValues.append(video);
                    }
                })
            })

            socket.on('user-disconnected', userId => {
                if (peers[userId]) {
                    peers[userId].close();
                }
            })

            // })

        });


    </script>
    <title>Video Streaming Page</title>
    <style>
        body {
            margin: 0px;
            padding: 0px;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
        }

        #header {
            text-align: center;
            padding: 20px;
            box-shadow: 0 2px 4px 0 hsla(0, 0%, 63.5%, .5);
            border-bottom: 1px solid #d0d0d0;
            font-size: 24px;
        }


        #parentVideo {
            width: auto;
        }

        #captureStreams {
            display: grid;
            grid-template-columns: repeat(auto-fill, 200px);
            grid-auto-rows: 200px;
            padding: 15px;
        }

        #captureStreams video {
            height: 100%;
            width: 100%;
            object-fit: contain;
        }
    </style>
</head>

<body>
    <div id='header'>Welcome to Live streaming</div>
    <div id="captureStreams"></div>
</body>

</html>
