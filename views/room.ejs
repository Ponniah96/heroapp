<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <script>
    const ROOM_ID = "<%= roomID %>"
  </script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
  <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js" defer></script>
  <script src="/socket.io/socket.io.js" defer></script>
  <!-- <script src="script.js" defer type="module"></script> -->
  <script type="text/javascript">
    document.addEventListener("DOMContentLoaded", function () {
      const socket = io('/');
      const myPeer = new Peer({ host: 'peerjs-server.herokuapp.com', secure: true, port: 443 })
      const peers = {};
      const videoGrid = document.getElementById('video-grid');
      const ownvideoGrid = document.getElementById('own-video-grid');
      const myOwnVideo = document.getElementById('own');
      var array = [];
      const streamValues = document.getElementById("StreamValues");
      myPeer.on('open', id => {
        socket.emit('join-room', ROOM_ID, id);
        localStorage.setItem("ROOM_ID", ROOM_ID);
      })

      myOwnVideo.controls = true;
      myOwnVideo.muted = true;
      myOwnVideo.poster = "https://image.shutterstock.com/image-vector/vector-live-stream-icon-flat-260nw-1282569241.jpg"

      navigator.mediaDevices.getUserMedia({
        video: true,
        audio: {
          sampleSize: 8,
          echoCancellation: true
        }
      }).then(stream => {
        addOwnVideoStream(myOwnVideo, stream);
        myPeer.on('call', call => {
          const otherVideo = document.createElement('video');
          otherVideo.setAttribute('id', 'others');
          otherVideo.controls = true;
          call.answer(stream);
          call.on('stream', userVideoStream => {
            addVideoStream(otherVideo, userVideoStream);
            console.log("PEER GET VIDEO TRACKS : ", userVideoStream.getVideoTracks()[0]);
            console.log("PEER GET AUDIO TRACKS : ", userVideoStream.getAudioTracks()[0])
          })
        })

        socket.on('user-connected', userId => {
          connectToNewUser(userId, stream);
        })

        socket.on('user-disconnected', userId => {
          if (peers[userId]) {
            peers[userId].close();
          }
        })

      })

      function connectToNewUser(userId, stream) {
        const otherVideo = document.createElement('video');
        otherVideo.setAttribute('id', 'others');
        otherVideo.controls = true;
        otherVideo.className = userId;
        const call = myPeer.call(userId, stream);
        call.on('stream', userVideoStream => {
          addVideoStream(otherVideo, userVideoStream);
          console.log("SOCKET GET VIDEO TRACKS : ", userVideoStream.getVideoTracks()[0]);
          console.log("SOCKET GET AUDIO TRACKS : ", userVideoStream.getAudioTracks()[0])
        })
        peers[userId] = call;
      }

      function addVideoStream(video, stream) {
        console.log("Video Data: ", stream);
        video.srcObject = stream;
        video.addEventListener('loadedmetadata', (e) => {
          video.play();
        });
        videoGrid.append(video);

      }

      function addOwnVideoStream(video, stream) {
        video.srcObject = stream
        video.addEventListener('loadedmetadata', () => {
          video.play();
        });
        ownvideoGrid.append(video);
      }
    });


  </script>
  <title>Video Calling Website</title>
  <style>
    body {
      margin: 0px;
      padding: 0px;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;
    }

    #header {
      text-align: center;
      padding: 20px;
      box-shadow: 0 2px 4px 0 hsla(0, 0%, 63.5%, .5);
      border-bottom: 1px solid #d0d0d0;
      font-size: 24px;
    }

    #own-video-grid {
      display: block;
      margin: 0px auto;
      height: 400px;
      width: 800px;
      background: black;
    }

    @media(max-width:767px) {
      #own-video-grid {
        height: 250px;
        width: 300px;
      }
    }

    #own {
      height: 100%;
      width: 100%;
      object-fit: contain;
    }

    #video-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, 200px);
      grid-auto-rows: 200px;
      padding: 15px;
    }

    @media(max-width:767px) {
      #video-grid {
        grid-auto-rows: 200px;
      }
    }

    #others {
      object-fit: contain;
      height: 100%;
      width: 100%;
    }

    #screen-share {
      text-align: center;
    }

    .screen-share {
      display: block !important;
    }

    #start {
      background: limegreen;
      color: white;
      border: 1px solid limegreen;
      padding: 10px 20px;
      border-radius: 4px;
    }

    .stop {
      background: red !important;
      color: white !important;
      border: 1px solid red !important;
      padding: 10px 20px !important;
      border-radius: 4px !important;
    }

    #camera-on {
      background: limegreen;
      color: white;
      border: 1px solid limegreen;
      padding: 10px 20px;
      border-radius: 4px;
    }

    .d-none {
      display: none;
    }

    #captureStream {
      display: grid;
      grid-template-columns: repeat(auto-fill, 200px);
      grid-auto-rows: 200px;
      padding: 15px;
    }

    #captureStream video {
      height: 100%;
      width: 100%;
      object-fit: cover;
    }
  </style>
</head>

<body>
  <div id='header'>Welcome to Video Calling using Node js</div>

  <div id="own-video-grid">
    <video id="own" autoplay playsinline></video>
  </div>

  <h2 style="text-align: center;">Other Calls</h2>

  <div id="video-grid">
  </div>

  <!-- <div id="screen-share">
    <p>Click the Start Capture button to begin.</p>
    <p><button id="start">Start Sharing</button>&nbsp;<button id="camera-on">Camera on</button></p>
  </div> 
  <div id="captureStream">
    Capture Streams
  </div>
  <div id="StreamValues"></div>
  <div id="recorder"></div>-->
</body>

</html>
